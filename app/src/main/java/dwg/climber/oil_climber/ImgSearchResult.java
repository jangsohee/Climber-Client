/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dwg.climber.oil_climber;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImgSearchResult implements org.apache.thrift.TBase<ImgSearchResult, ImgSearchResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImgSearchResult");

  private static final org.apache.thrift.protocol.TField GUESS_FIELD_DESC = new org.apache.thrift.protocol.TField("guess", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("imgs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("pages", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImgSearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImgSearchResultTupleSchemeFactory());
  }

  public String guess; // required
  public List<SimilarImg> imgs; // required
  public List<MatchingPage> pages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUESS((short)1, "guess"),
    IMGS((short)2, "imgs"),
    PAGES((short)3, "pages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUESS
          return GUESS;
        case 2: // IMGS
          return IMGS;
        case 3: // PAGES
          return PAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUESS, new org.apache.thrift.meta_data.FieldMetaData("guess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMGS, new org.apache.thrift.meta_data.FieldMetaData("imgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimilarImg.class))));
    tmpMap.put(_Fields.PAGES, new org.apache.thrift.meta_data.FieldMetaData("pages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchingPage.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImgSearchResult.class, metaDataMap);
  }

  public ImgSearchResult() {
  }

  public ImgSearchResult(
    String guess,
    List<SimilarImg> imgs,
    List<MatchingPage> pages)
  {
    this();
    this.guess = guess;
    this.imgs = imgs;
    this.pages = pages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImgSearchResult(ImgSearchResult other) {
    if (other.isSetGuess()) {
      this.guess = other.guess;
    }
    if (other.isSetImgs()) {
      List<SimilarImg> __this__imgs = new ArrayList<SimilarImg>();
      for (SimilarImg other_element : other.imgs) {
        __this__imgs.add(new SimilarImg(other_element));
      }
      this.imgs = __this__imgs;
    }
    if (other.isSetPages()) {
      List<MatchingPage> __this__pages = new ArrayList<MatchingPage>();
      for (MatchingPage other_element : other.pages) {
        __this__pages.add(new MatchingPage(other_element));
      }
      this.pages = __this__pages;
    }
  }

  public ImgSearchResult deepCopy() {
    return new ImgSearchResult(this);
  }

  @Override
  public void clear() {
    this.guess = null;
    this.imgs = null;
    this.pages = null;
  }

  public String getGuess() {
    return this.guess;
  }

  public ImgSearchResult setGuess(String guess) {
    this.guess = guess;
    return this;
  }

  public void unsetGuess() {
    this.guess = null;
  }

  /** Returns true if field guess is set (has been assigned a value) and false otherwise */
  public boolean isSetGuess() {
    return this.guess != null;
  }

  public void setGuessIsSet(boolean value) {
    if (!value) {
      this.guess = null;
    }
  }

  public int getImgsSize() {
    return (this.imgs == null) ? 0 : this.imgs.size();
  }

  public java.util.Iterator<SimilarImg> getImgsIterator() {
    return (this.imgs == null) ? null : this.imgs.iterator();
  }

  public void addToImgs(SimilarImg elem) {
    if (this.imgs == null) {
      this.imgs = new ArrayList<SimilarImg>();
    }
    this.imgs.add(elem);
  }

  public List<SimilarImg> getImgs() {
    return this.imgs;
  }

  public ImgSearchResult setImgs(List<SimilarImg> imgs) {
    this.imgs = imgs;
    return this;
  }

  public void unsetImgs() {
    this.imgs = null;
  }

  /** Returns true if field imgs is set (has been assigned a value) and false otherwise */
  public boolean isSetImgs() {
    return this.imgs != null;
  }

  public void setImgsIsSet(boolean value) {
    if (!value) {
      this.imgs = null;
    }
  }

  public int getPagesSize() {
    return (this.pages == null) ? 0 : this.pages.size();
  }

  public java.util.Iterator<MatchingPage> getPagesIterator() {
    return (this.pages == null) ? null : this.pages.iterator();
  }

  public void addToPages(MatchingPage elem) {
    if (this.pages == null) {
      this.pages = new ArrayList<MatchingPage>();
    }
    this.pages.add(elem);
  }

  public List<MatchingPage> getPages() {
    return this.pages;
  }

  public ImgSearchResult setPages(List<MatchingPage> pages) {
    this.pages = pages;
    return this;
  }

  public void unsetPages() {
    this.pages = null;
  }

  /** Returns true if field pages is set (has been assigned a value) and false otherwise */
  public boolean isSetPages() {
    return this.pages != null;
  }

  public void setPagesIsSet(boolean value) {
    if (!value) {
      this.pages = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUESS:
      if (value == null) {
        unsetGuess();
      } else {
        setGuess((String)value);
      }
      break;

    case IMGS:
      if (value == null) {
        unsetImgs();
      } else {
        setImgs((List<SimilarImg>)value);
      }
      break;

    case PAGES:
      if (value == null) {
        unsetPages();
      } else {
        setPages((List<MatchingPage>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUESS:
      return getGuess();

    case IMGS:
      return getImgs();

    case PAGES:
      return getPages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUESS:
      return isSetGuess();
    case IMGS:
      return isSetImgs();
    case PAGES:
      return isSetPages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImgSearchResult)
      return this.equals((ImgSearchResult)that);
    return false;
  }

  public boolean equals(ImgSearchResult that) {
    if (that == null)
      return false;

    boolean this_present_guess = true && this.isSetGuess();
    boolean that_present_guess = true && that.isSetGuess();
    if (this_present_guess || that_present_guess) {
      if (!(this_present_guess && that_present_guess))
        return false;
      if (!this.guess.equals(that.guess))
        return false;
    }

    boolean this_present_imgs = true && this.isSetImgs();
    boolean that_present_imgs = true && that.isSetImgs();
    if (this_present_imgs || that_present_imgs) {
      if (!(this_present_imgs && that_present_imgs))
        return false;
      if (!this.imgs.equals(that.imgs))
        return false;
    }

    boolean this_present_pages = true && this.isSetPages();
    boolean that_present_pages = true && that.isSetPages();
    if (this_present_pages || that_present_pages) {
      if (!(this_present_pages && that_present_pages))
        return false;
      if (!this.pages.equals(that.pages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ImgSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ImgSearchResult typedOther = (ImgSearchResult)other;

    lastComparison = Boolean.valueOf(isSetGuess()).compareTo(typedOther.isSetGuess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guess, typedOther.guess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgs()).compareTo(typedOther.isSetImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgs, typedOther.imgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPages()).compareTo(typedOther.isSetPages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pages, typedOther.pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImgSearchResult(");
    boolean first = true;

    sb.append("guess:");
    if (this.guess == null) {
      sb.append("null");
    } else {
      sb.append(this.guess);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgs:");
    if (this.imgs == null) {
      sb.append("null");
    } else {
      sb.append(this.imgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pages:");
    if (this.pages == null) {
      sb.append("null");
    } else {
      sb.append(this.pages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImgSearchResultStandardSchemeFactory implements SchemeFactory {
    public ImgSearchResultStandardScheme getScheme() {
      return new ImgSearchResultStandardScheme();
    }
  }

  private static class ImgSearchResultStandardScheme extends StandardScheme<ImgSearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImgSearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guess = iprot.readString();
              struct.setGuessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.imgs = new ArrayList<SimilarImg>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  SimilarImg _elem2; // required
                  _elem2 = new SimilarImg();
                  _elem2.read(iprot);
                  struct.imgs.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.pages = new ArrayList<MatchingPage>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  MatchingPage _elem5; // required
                  _elem5 = new MatchingPage();
                  _elem5.read(iprot);
                  struct.pages.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImgSearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guess != null) {
        oprot.writeFieldBegin(GUESS_FIELD_DESC);
        oprot.writeString(struct.guess);
        oprot.writeFieldEnd();
      }
      if (struct.imgs != null) {
        oprot.writeFieldBegin(IMGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.imgs.size()));
          for (SimilarImg _iter6 : struct.imgs)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pages != null) {
        oprot.writeFieldBegin(PAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pages.size()));
          for (MatchingPage _iter7 : struct.pages)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImgSearchResultTupleSchemeFactory implements SchemeFactory {
    public ImgSearchResultTupleScheme getScheme() {
      return new ImgSearchResultTupleScheme();
    }
  }

  private static class ImgSearchResultTupleScheme extends TupleScheme<ImgSearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImgSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGuess()) {
        optionals.set(0);
      }
      if (struct.isSetImgs()) {
        optionals.set(1);
      }
      if (struct.isSetPages()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGuess()) {
        oprot.writeString(struct.guess);
      }
      if (struct.isSetImgs()) {
        {
          oprot.writeI32(struct.imgs.size());
          for (SimilarImg _iter8 : struct.imgs)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetPages()) {
        {
          oprot.writeI32(struct.pages.size());
          for (MatchingPage _iter9 : struct.pages)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImgSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.guess = iprot.readString();
        struct.setGuessIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.imgs = new ArrayList<SimilarImg>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            SimilarImg _elem12; // required
            _elem12 = new SimilarImg();
            _elem12.read(iprot);
            struct.imgs.add(_elem12);
          }
        }
        struct.setImgsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pages = new ArrayList<MatchingPage>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            MatchingPage _elem15; // required
            _elem15 = new MatchingPage();
            _elem15.read(iprot);
            struct.pages.add(_elem15);
          }
        }
        struct.setPagesIsSet(true);
      }
    }
  }

}

